<script>
function initTinyMCE(selector, options) {
    options = options || {};
    
    const defaultOptions = {
        selector: selector,
        height: 400,
        menubar: false,
        branding: false,
        promotion: false,
        readonly: false,
        disabled: false,
        plugins: [
            'advlist', 'autolink', 'lists', 'link', 'charmap',
            'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
            'insertdatetime', 'table', 'help', 'wordcount'
        ],
        toolbar: 'undo redo | blocks | bold italic underline strikethrough | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link | wordcleanup removeformat | code fullscreen | help',
        content_style: `
            body { 
                font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; 
                font-size: 16px; 
                line-height: 1.6; 
                color: #374151;
                max-width: none;
            }
            p { margin-bottom: 1em; }
            h1, h2, h3, h4, h5, h6 { 
                font-weight: 600; 
                margin-top: 1.5em; 
                margin-bottom: 0.5em; 
                line-height: 1.3;
            }
            h1 { font-size: 2em; }
            h2 { font-size: 1.5em; }
            h3 { font-size: 1.25em; }
            ul, ol { margin-bottom: 1em; padding-left: 2em; }
            li { margin-bottom: 0.5em; }
            blockquote { 
                border-left: 4px solid #3b82f6; 
                padding-left: 1em; 
                margin: 1em 0; 
                font-style: italic;
                background: #f8fafc;
                padding: 1em;
            }
            code { 
                background: #f1f5f9; 
                padding: 0.2em 0.4em; 
                border-radius: 0.25em; 
                font-family: 'Monaco', 'Courier New', monospace;
            }
            pre { 
                background: #f1f5f9; 
                padding: 1em; 
                border-radius: 0.5em; 
                overflow-x: auto;
                margin: 1em 0;
            }
            table { 
                border-collapse: collapse; 
                width: 100%; 
                margin: 1em 0;
            }
            th, td { 
                border: 1px solid #d1d5db; 
                padding: 0.5em 1em; 
                text-align: left;
            }
            th { 
                background: #f9fafb; 
                font-weight: 600;
            }
        `,
        
        // Basic content filtering
        valid_elements: 'p,br,strong,b,em,i,u,s,h1,h2,h3,h4,h5,h6,ul,ol,li,blockquote,a[href|title|target],table,tr,td,th,tbody,thead,code,pre',
        valid_styles: {
            '*': 'color,font-size,font-weight,text-decoration,text-align'
        },
        
        // Content processing
        cleanup: true,
        convert_urls: false,
        remove_script_host: false,
        relative_urls: false,
        
        // Custom setup
        setup: function(editor) {
            // Add custom button for Word cleanup
            editor.ui.registry.addButton('wordcleanup', {
                text: 'Clean Word',
                icon: 'clean',
                tooltip: 'Clean Word formatting',
                onAction: function() {
                    const content = editor.getContent();
                    const cleanedContent = cleanWordContent(content);
                    editor.setContent(cleanedContent);
                    if (typeof showToast === 'function') {
                        showToast('Content cleaned from Word formatting!', 'success');
                    }
                }
            });
            
            // Basic content change monitoring
            editor.on('change', function() {
                // Content changed - can add save functionality here
            });
        },
        
        block_formats: 'Paragraph=p; Heading 1=h1; Heading 2=h2; Heading 3=h3; Heading 4=h4; Quote=blockquote'
    };
    
    // Merge with custom options
    const finalOptions = Object.assign({}, defaultOptions, options);
    
    return tinymce.init(finalOptions);
}

function cleanWordContent(content) {
    let cleaned = content;
    
    // Remove Word XML and namespace declarations
    cleaned = cleaned.replace(/<\?xml[^>]*>/g, '');
    cleaned = cleaned.replace(/<\/?[ovwxp]:[^>]*>/g, '');
    
    // Remove Word-specific attributes
    cleaned = cleaned.replace(/\s*(class|style|lang|align|valign|bgcolor)\s*=\s*["'][^"']*["'][^>]*/gi, '');
    
    // Remove font tags
    cleaned = cleaned.replace(/<\/?font[^>]*>/gi, '');
    
    // Clean span tags
    cleaned = cleaned.replace(/<span[^>]*>([^<]*)<\/span>/gi, '$1');
    cleaned = cleaned.replace(/<span[^>]*>/gi, '');
    cleaned = cleaned.replace(/<\/span>/gi, '');
    
    // Convert div to paragraphs
    cleaned = cleaned.replace(/<div[^>]*>/gi, '<p>');
    cleaned = cleaned.replace(/<\/div>/gi, '</p>');
    
    // Remove Word paragraph marks and line breaks
    cleaned = cleaned.replace(/\r\n|\r|\n/g, ' ');
    cleaned = cleaned.replace(/\s{2,}/g, ' ');
    
    // Remove empty elements
    cleaned = cleaned.replace(/<([^>]+)>\s*<\/\1>/gi, '');
    cleaned = cleaned.replace(/<p[^>]*>\s*<\/p>/gi, '');
    
    // Clean up Word lists
    cleaned = cleaned.replace(/<p[^>]*>\s*Â·\s*([^<]*)<\/p>/gi, '<li>$1</li>');
    cleaned = cleaned.replace(/(<li>[^<]*<\/li>)/gi, '<ul>$1</ul>');
    cleaned = cleaned.replace(/<\/ul>\s*<ul>/gi, '');
    
    // Remove Word comments and metadata
    cleaned = cleaned.replace(/<!--\[if[\s\S]*?<!\[endif\]-->/gi, '');
    cleaned = cleaned.replace(/<\/?o:p[^>]*>/gi, '');
    
    return cleaned.trim();
}

function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 px-6 py-3 rounded-xl shadow-lg z-50 transform transition-all duration-300 ' + 
        (type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white');
    
    toast.innerHTML = '<div class="flex items-center space-x-2">' +
        '<i class="fas ' + (type === 'success' ? 'fa-check' : 'fa-exclamation-triangle') + '"></i>' +
        '<span>' + message + '</span>' +
        '</div>';
    
    document.body.appendChild(toast);
    
    setTimeout(function() {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        setTimeout(function() {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 300);
    }, 3000);
}
</script>